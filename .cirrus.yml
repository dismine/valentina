### Global defaults

env:  
  CCACHE_SIZE: "800M"
  CCACHE_DIR: "/tmp/ccache_dir"
  CCACHE_NOHASHDIR: "1"  # Debug info might contain a stale path if the build dir changes, but this is fine
  CCACHE_CPP2: "yes"

### Task templates

# https://cirrus-ci.org/guide/writing-tasks/#supported-functions
qbs_task_filter: &QBS_TASK_FILTER
  skip: "!changesInclude('.cirrus.yml', 'scripts/symupload.py', '**.{h,hpp,cpp,c,ts,ui,png,qbs,js}')"

sonar_task_filter: &SONAR_TASK_FILTER
  skip: "!changesInclude('**.{h,hpp,cpp,c}')"

regular_task_template: &REGULER_TASK_TEMPLATE
  ccache_cache:
    folder: "/tmp/ccache_dir"

linux_qt6_task_template: &LINUX_QT6_TASK_TEMPLATE
  << : *QBS_TASK_FILTER
  install_script:
    - bash -c "$PACKAGE_MANAGER_INSTALL -y qt6-base-dev qt6-l10n-tools libqt6svg6-dev qt6-base-dev-tools qmake6 libxerces-c-dev poppler-utils libgl1-mesa-dev git"
    - git fetch --tags
  build_script:
    - uname -a
    - mkdir -pm 0700 $XDG_RUNTIME_DIR
    - Xvfb $DISPLAY -ac -screen 0 1600x1200x24+32 -nolisten tcp -nolisten unix &
    - sleep 1
    - ccache --set-config sloppiness=pch_defines,time_macros max_size="$CCACHE_SIZE"
    - echo $PATH
    - which qmake6
    - which qbs
    - pwd
    - ls -l /usr/bin/ | grep -E "${COMPILER_REGEX}"
    - ${COMPILER} --version
    - qmake6 --version
    - qbs --version
    - qbs setup-toolchains /usr/bin/${COMPILER} ${COMPILER}
    - qbs setup-qt /usr/bin/qmake6 qt6
    - qbs config profiles.qt6.baseProfile ${COMPILER}
    - qbs config defaultProfile qt6
    - qbs build -f valentina.qbs -d build --jobs $(nproc) profile:qt6 config:release modules.buildconfig.enableCcache:${ENABLE_CCACHE} modules.cpp.linkerVariant:mold --force-probe-execution
    - qbs -p autotest-runner -d build profile:qt6 config:release
    - ccache -s

linux_qt6_sonar_task_template: &LINUX_QT6_TASK_SONAR_TEMPLATE
  << : *QBS_TASK_FILTER
  install_script:
    - bash -c "$PACKAGE_MANAGER_INSTALL -y qt6-base-dev qt6-l10n-tools libqt6svg6-dev qt6-base-dev-tools libxerces-c-dev poppler-utils libgl1-mesa-dev"
    - git fetch --tags
  build_script:
    - uname -a
    - mkdir -pm 0700 $XDG_RUNTIME_DIR
    - Xvfb $DISPLAY -ac -screen 0 1600x1200x24+32 -nolisten tcp -nolisten unix &
    - sleep 1
    - ccache --set-config sloppiness=pch_defines,time_macros max_size="$CCACHE_SIZE"
    - echo $PATH
    - which qmake6
    - which qbs
    - pwd
    - ls -l /usr/bin/ | grep -E "${COMPILER_REGEX}"
    - ${COMPILER} --version
    - qmake6 --version
    - qbs --version
    - qbs setup-toolchains /usr/bin/${COMPILER} ${COMPILER}
    - qbs setup-qt /usr/bin/qmake6 qt6
    - qbs config profiles.qt6.baseProfile ${COMPILER}
    - qbs config defaultProfile qt6
    - build-wrapper-linux-x86-64 --out-dir ${CIRRUS_WORKING_DIR}/bw-output qbs build --no-install -f valentina.qbs -d ${CIRRUS_WORKING_DIR}/build --jobs $(nproc) profile:qt6 config:debug modules.buildconfig.enableCcache:true modules.cpp.linkerVariant:mold modules.buildconfig.enableTestCoverage:true modules.buildconfig.enablePCH:false
    # Execute the tests to generate the coverage statistics
    - qbs -p autotest-runner -d build profile:qt6 config:debug
    # Run gcov to translate `.gcda` files into `.gcov` readable by humans and SonarCloud
    - mkdir ${CIRRUS_WORKING_DIR}/build/coverage-dir
    - cd ${CIRRUS_WORKING_DIR}/build/coverage-dir
    # --preserve-paths helps us avoid name clash for `.gcov` files corresponding to source files
    # with the same name but in different directories.
    - find .. -name '*.o' -exec gcov --preserve-paths {} \;
    - cd $CIRRUS_WORKING_DIR
    - sonar-scanner -Dsonar.scm.revision=${CIRRUS_CHANGE_IN_REPO} -Dsonar.links.ci=https://cirrus-ci.com/task/${CIRRUS_TASK_ID} -Dsonar.branch.name=${CIRRUS_BRANCH} -Dsonar.cfamily.gcov.reportsPath="${CIRRUS_WORKING_DIR}/build/coverage-dir"
    - ccache -s

linux_qt5_qbs_task_template: &LINUX_QT5_QBS_TASK_TEMPLATE
  << : *QBS_TASK_FILTER
  install_script:
    - bash -c "$PACKAGE_MANAGER_INSTALL qtbase5-dev libqt5svg5-dev qttools5-dev-tools libqt5xmlpatterns5-dev libqt5core5a libqt5gui5 libqt5printsupport5 libqt5svg5 libqt5widgets5 libqt5xml5 libqt5xmlpatterns5 poppler-utils git"
    - git fetch --tags
  build_script:
    - uname -a
    - mkdir -pm 0700 $XDG_RUNTIME_DIR
    - Xvfb $DISPLAY -ac -screen 0 1600x1200x24+32 -nolisten tcp -nolisten unix &
    - sleep 1
    - ccache --set-config sloppiness=pch_defines,time_macros max_size="$CCACHE_SIZE"
    - echo $PATH
    - which qmake
    - which qbs
    - pwd
    - ls -l /usr/bin/ | grep -E "${COMPILER_REGEX}"
    - ${COMPILER} --version
    - qmake --version
    - qbs --version
    - qbs setup-toolchains /usr/bin/${COMPILER} ${COMPILER}
    - qbs setup-qt /usr/bin/qmake qt5
    - qbs config defaultProfile qt5
    - qbs config profiles.qt5.baseProfile ${COMPILER}
    - qbs build -f valentina.qbs -d build --jobs $(nproc) profile:qt5 config:release modules.buildconfig.enableCcache:${ENABLE_CCACHE} modules.cpp.linkerVariant:mold --force-probe-execution
    - qbs -p autotest-runner -d build profile:qt5 config:release
    - ccache -s

appimage_task_template: &APPIMAGE_TASK_TEMPLATE
  << : *QBS_TASK_FILTER
  pip_cache:
    folder: ${PIP_CACHE_DIR}
  conan_cache:
    folder: "~/.conan/data"
  install_script:
    - bash -c "$PACKAGE_MANAGER_INSTALL qt6-base-dev libqt6svg6-dev qt6-translations-l10n qt6-image-formats-plugins qt6-l10n-tools qt6-base-dev-tools libxerces-c-dev poppler-utils git xvfb ccache build-essential libgl1-mesa-dev libicu-dev cmake clang-15 llvm python3-pip help2man texinfo"
    - git fetch --tags
    - python3 --version
    - export PATH="${PATH}:/root/.local/bin"
    - pip3 install --user --upgrade -r share/ci/requirements-ci.txt
  build_script:
    - uname -a
    - mkdir -pm 0700 $XDG_RUNTIME_DIR
    - Xvfb $DISPLAY -ac -screen 0 1600x1200x24+32 -nolisten tcp -nolisten unix &
    - sleep 1
    - ccache --set-config sloppiness=pch_defines,time_macros max_size="$CCACHE_SIZE"
    - export PATH="${PATH}:/root/.local/bin"
    - echo $PATH
    - which qmake6
    - which qbs
    - pwd
    - ls -l /usr/bin/ | grep -E "${COMPILER_REGEX}"
    - ln -s /usr/bin/clang-15 /usr/bin/clang
    - ln -s /usr/bin/clang++-15 /usr/bin/clang++
    - update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
    - update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100
    - ${COMPILER} --version
    - qmake6 --version
    - qbs --version
    - qbs setup-toolchains /usr/bin/${COMPILER} ${COMPILER}
    - qbs setup-qt /usr/bin/qmake6 qt6
    - qbs config defaultProfile qt6
    - qbs config profiles.qt6.baseProfile ${COMPILER}
    - conan install . --build=missing -o '&:with_crash_reporting=True' -pr=share/ci/conan/profiles/appimage
    - echo $CIRRUS_WORKING_DIR
    - qbs build -f valentina.qbs -d $CIRRUS_WORKING_DIR/build --jobs $(nproc) profile:qt6 config:release modules.buildconfig.enableCcache:${ENABLE_CCACHE} qbs.installRoot:$CIRRUS_WORKING_DIR/build/AppDir modules.buildconfig.enableAppImage:true modules.buildconfig.enableRPath:false project.conanWithCrashReporting:true project.enableConan:true project.conanProfiles:share/ci/conan/profiles/appimage
    - qbs -p autotest-runner -d build profile:qt6 config:release
    - export CRASH_QT_VERSION=$(/usr/bin/qmake6 -query QT_VERSION | awk -F. '{print $1 "_" $2}')
    - export CRASH_SHORT_SHA=$(git log --pretty=format:%h -n 1)
    - python3 scripts/symupload.py $CIRRUS_WORKING_DIR/build/AppDir $VALENTINA_VERSION g$CRASH_SHORT_SHA $CRASH_QT_VERSION --clean
    - $CIRRUS_WORKING_DIR/build/AppDir/usr/local/bin/crashpad_handler --version
    - du -h $CIRRUS_WORKING_DIR/build/AppDir/usr/local/bin/crashpad_handler
    - appimage-builder --recipe dist/AppImage/AppImageBuilder.yml --appdir $CIRRUS_WORKING_DIR/build/AppDir --skip-test
    - ccache -s
  deploy_script:
    - pwd
    - $CIRRUS_WORKING_DIR/scripts/appimage-deploy.sh

linux_task:
  << : *REGULER_TASK_TEMPLATE
  env:
    DEBIAN_FRONTEND: "noninteractive"
    PACKAGE_MANAGER_INSTALL: "apt-get -qq update && apt-get install -y"
    DISPLAY: ":90"
    XDG_RUNTIME_DIR: "/tmp/runtime-kdeci/"
  matrix:
    - container:
        image: dismine/clang-ubuntu:latest
      env:
        COMPILER: clang
        COMPILER_REGEX: clang
      matrix:
        - name: 'latest Clang [Qt5 QBS]'
          << : *LINUX_QT5_QBS_TASK_TEMPLATE
          env:
            QT_SELECT: "qt5"
            ENABLE_CCACHE: true
          container:
            cpu: 2
            memory: 6G  # Set to 6GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-container
        - name: 'latest Clang [Qt6]'
          << : *LINUX_QT6_TASK_TEMPLATE
          env:
            QT_SELECT: "qt6"
            ENABLE_CCACHE: true
          container:
            cpu: 8
            memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-container
    - container:
        image: dismine/valentina-appimage-builder:latest
      env:
        COMPILER: clang
        COMPILER_REGEX: clang
        PIP_CACHE_DIR: ${HOME}/.cache/pip
      matrix:
        - name: 'AppImage'
          << : *APPIMAGE_TASK_TEMPLATE
          env:
            ACCESS_TOKEN: ENCRYPTED[81e0b2381ffb628b73f5c94f834010e6631191e0ad03cdd0850d440fb2737a74b68131d842030f010c1bf73ab4cdc1ae]
            DEPLOY: "true"
            ENABLE_CCACHE: true
            VERSION: "continuous"
            QT_VERSION: Qt6
            ARCH: x86_64
            TARGET_PLATFORM: "Linux"
            VALENTINA_VERSION: 1_0_0
          container:
            cpu: 4 
            memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-container
    - container:
        image: dismine/gcc-ubuntu:latest
      env:
        COMPILER: gcc
        GCC_COLORS: 'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
        COMPILER_REGEX: "gcc|g\\+\\+"
      matrix:
        - name: 'latest GCC [Qt5 QBS]'
          << : *LINUX_QT5_QBS_TASK_TEMPLATE
          env:
            QT_SELECT: "qt5"
            ENABLE_CCACHE: true
          container:
            cpu: 3
            memory: 10G  # Set to 10GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-container
        - name: 'latest GCC [Qt6]'
          << : *LINUX_QT6_TASK_TEMPLATE
          env:
            QT_SELECT: "qt6"
            ENABLE_CCACHE: true
          container:
            cpu: 4
            memory: 16G  # Set to 16GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-container
        - name: 'Sonar, latest GCC [Qt6]'
          << : *LINUX_QT6_TASK_SONAR_TEMPLATE
          env:
            QT_SELECT: "qt6"
            SONAR_TOKEN: ENCRYPTED[!715ab983713a5035d505d2c601c9bb78a9475b9a04db62cdda9c674affd58ac956e563ce6d38228b48e05c4dbea2f52d!]
          container:
            cpu: 8
            memory: 10G  # Set to 10GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-container
          sonar_cache:
            folder: "${HOME}/.sonar/cache"

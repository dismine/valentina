
# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: '{build}-{branch}'

# branches to build
branches:
  # whitelist
  only:
    - develop
    - master

skip_commits:
  files:
    - ".cirrus.yml"

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

platform:
  - x86
  - x64

#---------------------------------#
#        environment setup        #
#---------------------------------#

# Do not set clone depth, we need all the tags to automatically detect the version based on git describe
# clone_depth: 1                      

# fetch repository as zip archive
shallow_clone: false                 # default is "false"

environment:
  ACCESS_TOKEN:
    secure: RUhnEHqaR8KhalOMWwZZOoO342Ja50QV4KpEWdm9g3pG+jG7i6aJqUmeKF1l5VN6dzksk1u+yN6pOLnU8oGcaVQ6v+1dpKK1oZvF0tyHhNE=
  APPVEYOR_SAVE_CACHE_ON_ERROR: "true"
  VALENTINA_VERSION: 1_0_0

  matrix:
    - job_name: Windows_Qt_5_15_(qbs_GCC_x86)
      job_group: 'Windows (qbs)'
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      COMPILER: mingw
      COMPILER_CPPSTD: gnu17
      COMPILER_LIBCXX: libstdc++11
      QT: Qt\5.15\mingw81_32
      QT_VERSION: Qt5_15
      BUILD_SYSTEM: "qbs"
      QMAKE: qmake.exe
      ENABLE_PCH: true
      GCC_VERSION: 8.1
      MINGW_PATH: C:\Qt\Tools\mingw810_32\bin
      ARCH: x86
      PYTHON: "C:\\Python311"
      TARGET_PLATFORM: "Windows7+"
      CHOCOLATEY_PACKAGES: false
      WINDEPLOYQT_BIN_PATH: "undefined"
      WINDEPLOYQT_COMPILER_RUNTIME: "true"
      WINDEPLOYQT_NO_COMPILER_RUNTIME: "false"
      DEPLOY: true
      RUN_TESTS: true
      WITH_CRASH_REPORTING: False

    - job_name: Windows_Qt_5_15_(qbs_GCC_x64)
      job_group: 'Windows (qbs)'
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      COMPILER: mingw
      COMPILER_CPPSTD: gnu17
      COMPILER_LIBCXX: libstdc++11
      QT: Qt\5.15\mingw81_64
      QT_VERSION: Qt5_15
      BUILD_SYSTEM: "qbs"
      QMAKE: qmake.exe
      ENABLE_PCH: true
      GCC_VERSION: 8.1
      MINGW_PATH: C:\Qt\Tools\mingw810_64\bin
      ARCH: x64
      PYTHON: "C:\\Python311-x64"
      TARGET_PLATFORM: "Windows7+"
      CHOCOLATEY_PACKAGES: false
      WINDEPLOYQT_BIN_PATH: "undefined"
      WINDEPLOYQT_COMPILER_RUNTIME: "true"
      WINDEPLOYQT_NO_COMPILER_RUNTIME: "false"
      DEPLOY: false
      RUN_TESTS: true
      WITH_CRASH_REPORTING: False

    - job_name: Windows_Qt_5_15_(qbs_MSVC_x64)
      job_group: 'Windows (qbs)'
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      COMPILER: msvc
      QT: Qt\5.15\msvc2019_64
      BUILD_SYSTEM: "qbs"
      QMAKE: qmake.exe
      ENABLE_PCH: true
      MSVC_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\Hostx64\\x64"
      VSINSTALLDIR: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\"
      VSVER: 16
      ARCH: x64
      PYTHON: "C:\\Python311-x64"
      TARGET_PLATFORM: "Windows7+"
      CHOCOLATEY_PACKAGES: false
      WINDEPLOYQT_BIN_PATH: "undefined"
      WINDEPLOYQT_COMPILER_RUNTIME: "true"
      WINDEPLOYQT_NO_COMPILER_RUNTIME: "false"
      DEPLOY: false
      RUN_TESTS: true 
      WITH_CRASH_REPORTING: False

matrix:
  fast_finish: false
  exclude:
    - platform: x86
      job_name: Windows_Qt_5_15_(qbs_GCC_x64)
    - platform: x86
      job_name: Windows_Qt_5_15_(qbs_MSVC_x64)
    - platform: x64
      job_name: Windows_Qt_5_15_(qbs_GCC_x86)   

for:

#---------------------------------#
#            Windows              #
#---------------------------------#

-
  matrix:
    only:
      - job_group: 'Windows (qbs)'

  # clone directory
  clone_folder: c:\projects\valentina

  cache:
    - C:\Users\appveyor\.conan2\p -> conan-cache
  
  # scripts that are called at very beginning, before repo cloning
  init:
    # Uncomment if need access through RDP
    #  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    - ver
    # Path before 
    - path
    - set QTDIR=C:\%QT%
    - set QT_PLUGIN_PATH=%QTDIR%\plugins
    - set PATH=%QTDIR%\bin;%QTDIR%\include;C:\ProgramData\chocolatey\bin;C:\Qt\Tools\QtCreator\bin;C:\Tools\PsTools;C:\Program Files\Git\cmd;C:\Program Files\Git\usr\bin;C:\Program Files\Git LFS;C:\Tools\GitVersion;C:\Windows\system32;C:\Windows;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\CMake\bin;%PYTHON%;%PYTHON%\Scripts;C:\Program Files (x86)\Inno Setup 6
    # Set VC variables for the platform
    - ps: |
        & choco install qbs -y --version=3.0.1
        if ($env:COMPILER -eq "msvc") {
          if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2022") {
            if ($env:ARCH -eq "x64") {
              cmd.exe /c "call `"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
            } elseif ($env:ARCH -eq "arm64") {
              cmd.exe /c "call `"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsamd64_arm64.bat`" && set > %temp%\vcvars.txt"
            } else {
              cmd.exe /c "call `"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars32.bat`" && set > %temp%\vcvars.txt"
            }
          } elseif ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2019") {
            if ($env:ARCH -eq "x64") {
              cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
            } elseif ($env:ARCH -eq "arm64") {
              cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsamd64_arm64.bat`" && set > %temp%\vcvars.txt"
            } else {
              cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars32.bat`" && set > %temp%\vcvars.txt"
            }
          }
 
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
            if ($_ -match "^(.*?)=(.*)$") {
              Set-Content "env:\$($matches[1])" $matches[2]
            }
          }  
        } else {
          if ($env:CHOCOLATEY_PACKAGES -eq "true") {
              & choco install mingw -y --version $env:CHOCOLATEY_MINGW_VERSION
          }
          $env:Path += ";$env:MINGW_PATH"
          $env:CC = "gcc.exe"
          $env:CXX = "g++.exe"
        }
    # Path after
    - path
    # Check that we have the expected version for Python
    - (python --version)
    # Install the build dependencies of the project.
    - (python -m pip install --upgrade pip)
    - python -m pip install -r share/ci/requirements-ci.txt 
    - dir "C:\"
    - dir "C:\Qt"
    - dir "C:\Qt\Tools"
    - dir %QTDIR%
    - dir "%QTDIR%\bin"
    - qbs --version

  before_build:
    - echo %APPVEYOR_BUILD_FOLDER%
    - cd %APPVEYOR_BUILD_FOLDER%
    - qbs-setup-toolchains --detect
    - qbs-setup-qt %QTDIR%\bin\%QMAKE% qt6
    - qbs-config defaultProfile qt6
    - dir "C:\Qt\Tools"
    - ps: |
        if ($env:COMPILER -eq "msvc")
        {
          & qbs-setup-toolchains.exe --type msvc $env:MSVC_PATH\cl.exe $env:COMPILER
          & qbs-config.exe profiles.qt6.baseProfile $env:COMPILER
        }
        else
        {
          & qbs-setup-toolchains.exe --type mingw $env:MINGW_PATH\g++.exe $env:COMPILER
          & qbs-config.exe  profiles.qt6.baseProfile $env:COMPILER
        }
    - qbs-config --list profiles

  build_script:
    - conan profile list
    - conan install . --build=missing -o '&:with_crash_reporting=%WITH_CRASH_REPORTING%' -o '&:with_xerces=True' -pr:a=share/ci/conan/profiles/windows_legacy 
    - set VALENTINA_BUILD_FOLDER=%APPVEYOR_BUILD_FOLDER%\build
    - echo %VALENTINA_BUILD_FOLDER%
    - qbs build -f valentina.qbs -d %VALENTINA_BUILD_FOLDER% --jobs %NUMBER_OF_PROCESSORS% config:release qbs.installRoot:%VALENTINA_BUILD_FOLDER%\release\install-root\valentina profile:qt6 project.enableConan:true project.conanWithCrashReporting:%WITH_CRASH_REPORTING% project.conanWithXerces:true modules.buildconfig.enableCcache:false project.conanProfiles:share/ci/conan/profiles/windows_legacy modules.buildconfig.enablePCH:%ENABLE_PCH% modules.windeployqt.windeployqtProgramBinPath:%WINDEPLOYQT_BIN_PATH% modules.windeployqt.compilerRuntime:%WINDEPLOYQT_COMPILER_RUNTIME% modules.windeployqt.noCompilerRuntime:%WINDEPLOYQT_NO_COMPILER_RUNTIME%
  
  test_script:
    - path
    - if "%RUN_TESTS%" == "true" (qbs -p autotest-runner -d %VALENTINA_BUILD_FOLDER% profile:qt6 config:release)

  deploy_script:
    - ps: |
        if ($env:WITH_CRASH_REPORTING -eq "True") {
          $qmakeOutput = & "$env:QTDIR\bin\$env:QMAKE" -query QT_VERSION
          $majorMinorVersion = $qmakeOutput -replace '(\d+)\.(\d+).*', '$1_$2'
          $env:CRASH_QT_VERSION = $majorMinorVersion

          $env:CRASH_SHORT_SHA = git log --pretty=format:%h -n 1
        }
    - ps: scripts/install_dump_sysms.ps1
    - if "%WITH_CRASH_REPORTING%" == "True" (python scripts/symupload.py %VALENTINA_BUILD_FOLDER%\release\install-root\valentina %VALENTINA_VERSION% g%CRASH_SHORT_SHA% %CRASH_QT_VERSION% --clean)
    - if "%DEPLOY%" == "true" (qbs build -f valentina.qbs -d %VALENTINA_BUILD_FOLDER% -p ValentinaSetup --jobs %NUMBER_OF_PROCESSORS% config:release qbs.installRoot:%VALENTINA_BUILD_FOLDER%\release\install-root\valentina profile:qt6 project.enableConan:true project.conanWithCrashReporting:%WITH_CRASH_REPORTING% project.conanWithXerces:true modules.buildconfig.enableCcache:false project.conanProfiles:share/ci/conan/profiles/windows_legacy modules.buildconfig.enablePCH:%ENABLE_PCH% modules.windeployqt.windeployqtProgramBinPath:%WINDEPLOYQT_BIN_PATH% modules.windeployqt.compilerRuntime:%WINDEPLOYQT_COMPILER_RUNTIME% modules.windeployqt.noCompilerRuntime:%WINDEPLOYQT_NO_COMPILER_RUNTIME%)
    - ps: scripts/appveyor-deploy.ps1

  on_finish:
    # Uncomment if need access through RDP
    # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

#---------------------------------#
#         notifications           #
#---------------------------------#
  
notifications:
  # Email
  - provider: Email
    to:
      - dismine@gmail.com
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true

